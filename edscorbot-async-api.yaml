asyncapi: 2.5.0
id: 'urn:example:es:us:edscorbot:mqtt-server'

info:
  title: ES Scorbot Async API
  version: 1.0.0
  description: >
    The ED Scorbot low level services definition for controlling an watching
    values from the Robotic arm. 


    ### Some useful links:

    * [Ed Scorbot Python]
    (https://github.com/RTC-research-group/Py-EDScorbotTool) - the Github
    projectcontaining the library (real implementation) of elementary/low level
    functions to access the robotic arm

    * [Ed Scorbot Documentation]
    (https://py-edscorbottool.readthedocs.io/en/latest/) - the user
    documentation/guide of the ED Scorbot tools (GUI, command line and detailed
    configurations). 

    ### Symbology

    * CONTROLLER = Arm's controller. The service responsible for receiving messages from clients, handling the physical arm and notifying clients. The controller guarantees the arm works accodring with its requirements.

    * CLIENT = Any application that wants to interact with the arm. In our case, this application is an Angular front-end to provide a friendly user experience to the final user (human).

    * We use a style where the information flows in channels from providers to subscribers.


  termsOfService: https://asyncapi.org/terms/
  contact:
    name: Enrique Pi√±ero Fuentes
    url: https://www.asyncapi.org/support
    email: epinerof@us.es
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  
servers:
  mosquitto:
    url: host.to.be.defined
    protocol: secure-mqtt
    description: Mosquitto test broker hosted at University of Sevilla
    #security:
    #  - user-password: []

defaultContentType: application/json

#tags:
#  - name: connection
#    description: Connection/Disconnection actions to be executed and their relates topics
  
channels:
  'checkStatus':
    description: Channel/topic provided to CLIENTS use to check the status of the controller (and of the arm). 
    publish:
      summary: CLIENTS are publishers
      operationId: checkStatusPub

    subscribe:
      summary: CONTROLLER is subscriber 
      operationId: checkStatusRec
  
  'status':
    description: Channel/topic provided to the CONTROLLER inform the current status of the arm. 
    publish:
      summary: CONTROLLER is publisher
      operationId: statusPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/status'

    subscribe:
      summary: CLIENTS are subscribers 
      operationId: statusRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/status'
     
  'connect':
    description: Channel/topic provided to CLIENTS use to connect to the arm, so they can become owners. If the arm is available, the controller promotes on client to `owner` and notifies all clients about it. 
    publish:
      summary: CLIENTS are publishers
      operationId: connectPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
    subscribe:
      summary: CONTROLLER is subscriber 
      operationId: connectRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'    
  
  'connected':
    description: Channel/topic provided to the CONTROLLER inform which client has successfully connected to the arm and became its `owner`. Only one client can be the amr's owner at a time. By the message content, client are able to know if they have been rejected as owner.
    publish:
      summary: CONTROLLER is publisher
      operationId: connectedPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
    subscribe:
      summary: CLIENTS are subscribers
      operationId: connectedRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
  
  'disconnect':
    description: Channel/topic provided to allow arm's owner (CLIENT) to `release` the arm. 
    publish:
      summary: CLIENTS are publishers
      operationId: disconnectPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
  
    subscribe:
      summary: CONTROLLER is subscriber
      operationId: disconnectRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
  
  'trajectory':
    description: Channel/topic provided to allow arm's owner (CLIENTS) to send a trajectory to the controller. A trajectory is a sequence of points and its execution respects the order of the points. Each point represents a single movement to be executed by the robot. 
    publish:
      summary: CLIENTS are publishers
      operationId: trajectoryPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
            trajectory:
              $ref: '#/components/schemas/trajectory'
    subscribe:
      summary: CONTROLLER is subscriber
      operationId: trajectoryRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
            trajectory:
              $ref: '#/components/schemas/trajectory'

  'point':
    description: Channel/topic provided to allow the CONTROLLER to publish the last point of the arm. The controller is supposed to publish this point each time the arm is moved. Therefore, it does not matter if the controller has moved the arm to the home position of is executing an entire trajectory.  
    publish:
      summary: CONTROLLER is publisher
      operationId: trajectoryPointPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
            point:
              $ref: '#/components/schemas/point'
    subscribe:
      summary: CLIENTS are subscribers
      operationId: trajectoryPointRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
            point:
              $ref: '#/components/schemas/point'
  'cancelTrajectory':
    description: Channel/topic provided to allow arm's owner (CLIENTS) to cancel theirs trajectory execution before finishing it. 
    publish:
      summary: CLIENTS are publishers
      operationId: cancelTrajectoryPub
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
    subscribe:
      summary: CONTROLLER is subscriber
      operationId: cancelTrajectoryRec
      message:
        payload:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/client'
components:
  schemas:
    client:
      type: object
      description: A client of the arm. It represents an user that wants to interact with the arm. It encapsulates all relevant information about the arm's client.
      properties:
        clientId:
          type: string
          description: The client identifier (email, token, etc.)
      
    point:
      type: object
      description: A quadruple representing a point assumed by all joints of a robot. The order of the joints is (J1,J2,J3,J4)
      properties:
        j1Ref:
          type: integer
          description: The ref value for joint 1. The possible values are [-450,500]
        j2Ref: 
          type: integer
          description: The ref value for joint 2. The possible values are [-950,800]
        j3Ref: 
          type: integer
          description: The ref value for joint 3. The possible values are [-350,350]
        j4Ref: 
          type: integer
          description: The ref value for joint 4. The possible values are [-1500,1600]
    
    trajectory:
      type: array
      description: A array of points to be applied to the arm.
      items:
        $ref: '#/components/schemas/point'
          
    status:
      type: string
      description: The status of the controller (and of the arm) to clients
      enum:
        - FREE
        - BUSY
        - ERROR

  securitySchemes:
      user-password:
        type: userPassword